@page "/admin/posts"

<main class="admin-are-main">

    <Client.Components.Admin.Sidebar />

    <div class="admin-area-content container-fluid bg-white">
        <div class="row g-0">
            <div class="col">
                <h1>Posts</h1>
                <br />
                <hr />
                <br />

                @if (InMemoryDatabaseCache.Posts is null || _attemptingToDeletePost)
                {
                    <LoadingDot/>
                }
                else
                {
                    <a href="/admin/posts/create" class="btn btn-success shadow me-5 md-f-size-1-5">
                        <i class="fas fa-plus"/> Create Post
                    </a>

                    <button @onclick="() => InMemoryDatabaseCache.GetPostsFromDatabaseAndCache()" class="btn btn-primary shadow md-f-size-1-5">
                        <i class="fas fa-sync"/> Refresh Data
                    </button>

                    <br />
                    <br />
                    <br />

                    @if (InMemoryDatabaseCache.Posts.Count < 1)
                    {
                        <h1>No posts found. Please create one.</h1>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered table-sm">
                                <thead>
                                    <tr>
                                        <th scope="col">Category</th>
                                        <th scope="col">Thumbnail</th>
                                        <th scope="col">Title</th>
                                        <th scope="col">Author</th>
                                        <th scope="col">Excerpt</th>
                                        <th scope="col">Publish Date</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var post in InMemoryDatabaseCache.Posts)
                                    {
                                        <tr>
                                            <th class="w-15" scope="row">
                                                <p>@post.Category.Name</p>
                                            </th>
                                            <td class="w-40">
                                                <img src="@($"{APIEndpoints.ServerBaseUrl}/{post.ThumbnailImagePath}")" class="admin-index-thumbnail-image" alt="Category thumbnail image"/>
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Title</p>
                                            </td>
                                            <td class="w-8">
                                                <p>@post.Author</p>
                                            </td>
                                            <td class="w-14">
                                                <p>@post.Excerpt</p>
                                            </td>
                                            <td class="w-8">
                                                <p>@(post.Published ? $"{post.PublishDate} UTC" : "Not Published")</p>
                                            </td>
                                            <td class="w-14">
                                                <div class="d-flex flex-column">

                                                    @if (!post.Published)
                                                    {
                                                        <button @onclick="() => PublishOrUnpublishPost(post)" class="btn btn-success shadow md-f-size-1-5">
                                                            <i class="fas fa-eye"/> Publish
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button @onclick="() => PublishOrUnpublishPost(post)" class="btn btn-secondary shadow md-f-size-1-5">
                                                            <i class="fas fa-eye-slash"/> Unpublish
                                                        </button>
                                                    }
                                                    <br/>

                                                    <a href="/admin/posts/update/@post.PostId" class="btn btn-update shadow md-f-size-1-5">
                                                        <i class="fas fa-edit"/> Update
                                                    </a>
                                                    <br/>
                                                    <button @onclick="(() => DeletePost(post))" class="btn btn-danger shadow md-f-size-1-5">
                                                        <i class="fas fa-trash"/> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }

                <div class="position-fixed bottom-0 end-5 z-index-5">
                    @if (_successfullyDeletedAPost)
                    {
                        <Toast IsError="false" ToastTitle="Successfully Deleted A Post"
                            ToastBody="The Post has been removed from the database."
                            ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedAPost = false"/>
                    }

                    @if (_unsuccessfullyTriedToDeleteAPost)
                    {
                        <Toast IsError="true" ToastTitle="Delete Failed"
                           ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeleteAPost}\" Please try again and if the issue persits contact the administrator.")"
                           ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToDeleteAPost = false" />
                    }

                    @if (_successfullyPublishedOrUnpublished)
                    {
                        <Toast IsError="false" ToastTitle="@($"{(_lastPublishedOrUnpublishedPost.Published ? "Publish" : "Unpublish")} Successful")"
                           ToastBody="@($"{(_lastPublishedOrUnpublishedPost.Published ? "The post is now visible on the public side." : "The post is no longer visible on the public side.")}")"
                           ParentMethodToCallOnClickBtnClose="() => _successfullyPublishedOrUnpublished = false" />
                    }

                    @if (_unsuccessfullyTriedToPublishOrUnpublish)
                    {
                        <Toast IsError="true" ToastTitle="Publish/Unpublish failed"
                           ToastBody="Something went wrong while communicating with the server. Please try again and if the issue persists contact the administrator."
                           ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToPublishOrUnpublish = false" />
                    }
                </div>

            </div>
        </div>
    </div>
</main>

@implements IDisposable
@code {
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InMemoryDatabaseCache.OnPostsDataChanged += StateHasChanged;

        if (InMemoryDatabaseCache.Posts is null)
        {
            await InMemoryDatabaseCache.GetPostsFromDatabaseAndCache();
        }
    }

    public void Dispose() => InMemoryDatabaseCache.OnPostsDataChanged -= StateHasChanged;

    [Inject] HttpClient HttpClient { get; set; }
    private bool _attemptingToDeletePost = false;
    private bool _successfullyDeletedAPost = false;
    private bool _unsuccessfullyTriedToDeleteAPost = false;
    private string _reasonUnsuccessfullyTriedToDeleteAPost = null;

    private async void DeletePost(Post postToDelete)
    {
        _attemptingToDeletePost = true;

        HttpResponseMessage response = await HttpClient.DeleteAsync($"{APIEndpoints.s_posts}/{postToDelete.PostId}");

        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            if (InMemoryDatabaseCache.Posts.Remove(postToDelete))
            {
                _successfullyDeletedAPost = true;
            }
            else
            {
                _reasonUnsuccessfullyTriedToDeleteAPost = "An unexpected error has occurred. Please try again. If the error persists, please contact an administrator.";
                _unsuccessfullyTriedToDeleteAPost = true;
            }
        }
        else
        {
            _reasonUnsuccessfullyTriedToDeleteAPost = $"The API didn't return an HttpStatusCode.NoContent status code. Instead the API returned the status code {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";

            _unsuccessfullyTriedToDeleteAPost = true;
        }

        _attemptingToDeletePost = false;
        StateHasChanged();
    }

    private bool _successfullyPublishedOrUnpublished = false;
    private bool _unsuccessfullyTriedToPublishOrUnpublish = false;
    private Post _lastPublishedOrUnpublishedPost = null;

    private async Task PublishOrUnpublishPost(Post postToPublishOrUnpublish)
    {
        postToPublishOrUnpublish.Published = !postToPublishOrUnpublish.Published;

        HttpResponseMessage httpResponseMessage = await HttpClient.PutAsJsonAsync<Post>($"{APIEndpoints.s_posts}/{postToPublishOrUnpublish.PostId}", postToPublishOrUnpublish);

        if (httpResponseMessage.StatusCode == System.Net.HttpStatusCode.Created)
        {
            Post updatedPost = await httpResponseMessage.Content.ReadFromJsonAsync<Post>();

            _lastPublishedOrUnpublishedPost = updatedPost;

            Post uneditedPostInList = await InMemoryDatabaseCache.GetPostByPostId(postToPublishOrUnpublish.PostId);

            uneditedPostInList.Published = updatedPost.Published;
            uneditedPostInList.PublishDate = updatedPost.PublishDate;

            _successfullyPublishedOrUnpublished = true;
        }
        else
        {
            _unsuccessfullyTriedToPublishOrUnpublish = true;
        }
    }
}